package ui;
/*
 * Frame_Principal.java
 *
 * Created on 5 de Abril de 2008, 01:46
 */
import configureCharts.GenerateGraphs;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import math.CalculateStatisticBasic;

import org.jfree.chart.ChartFrame;

//import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

import statistic.AmplitudeStatistic;
import statistic.AverageStatistic;
import statistic.CusumStatistic;
import statistic.GenericStatistic;
import statistic.MeanStatistic;
import statistic.MedianStatistic;
import statistic.MovingRangeStatistic;
import statistic.RegressionStatistic;
import statistic.StandardDeviationStatistic;
import types.DataConverter;
import types.DoubleDataConverter;
import controlcharts.AmplitudeChartLimits;
import controlcharts.AverageChartLimits;
import controlcharts.CusumChartLimits;
import controlcharts.GenericChartLimits;
import controlcharts.MedianChartLimits;
import controlcharts.MovingRangeChartLimits;
import controlcharts.RegressionChartLimits;
import controlcharts.StandardDeviationChartLimits;
import controlcharts.XIndividualChartLimits;
import data.DataSetCsvIterator;
import data.DataSetException;
import data.DataSetIterate;

/**
 *
 * @author  Administrador
 */
public class Main extends javax.swing.JFrame {

	/** Creates new form Frame_Principal */
	public Main() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        basic_statistic = new javax.swing.JMenuItem();
        normality_test = new javax.swing.JMenuItem();
        control_chart = new javax.swing.JMenu();
        selectBestChartjMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        control_chartAverage = new javax.swing.JMenuItem();
        control_charMedian = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        control_chartR = new javax.swing.JMenuItem();
        control_chartS = new javax.swing.JMenuItem();
        control_chartS2 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        control_chartp = new javax.swing.JMenuItem();
        control_chartnp = new javax.swing.JMenuItem();
        control_chartc = new javax.swing.JMenuItem();
        control_chartu = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        control_chartMR = new javax.swing.JMenuItem();
        control_chartXbar = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        regression = new javax.swing.JMenuItem();
        cusum = new javax.swing.JMenuItem();
        ewma = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        help = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Controle Estatístico de Qualidade - CEQ");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setName("frame_principal"); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletar(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jSeparator2.setAutoscrolls(true);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(0, 620, 1000, 30);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("   ------------------------Bem Vindo ao SISCEQ vs 1.0-Pressione F1 para Ajuda---------------------------------------\n");
        jTextArea1.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 980, 360);

        jLabel1.setText("   ------------------------Bem Vindo ao SISCEQ vs 1.0---------------------------------------- ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 400, 30);

        jMenu1.setText("Arquivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Estatística");

        basic_statistic.setText("Estatística Básica");
        basic_statistic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BasicStatisticActionPerformed(evt);
            }
        });
        jMenu2.add(basic_statistic);

        normality_test.setText("Teste de Normalidade");
        jMenu2.add(normality_test);
        normality_test.getAccessibleContext().setAccessibleName("item");

        control_chart.setText("Gráficos de Controle");
        control_chart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartActionPerformed(evt);
            }
        });

        selectBestChartjMenuItem.setText("Selecionar gráfico de controle");
        selectBestChartjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBestChartjMenuItemActionPerformed(evt);
            }
        });
        control_chart.add(selectBestChartjMenuItem);

        jMenu4.setText("Variáveis");

        jMenu7.setText("Nível");

        control_chartAverage.setText("Média");
        control_chartAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_charAverageActionPerformed(evt);
            }
        });
        jMenu7.add(control_chartAverage);

        control_charMedian.setText("Mediana");
        control_charMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_charMedianActionPerformed(evt);
            }
        });
        jMenu7.add(control_charMedian);

        jMenu4.add(jMenu7);

        jMenu9.setText("Dispersão");

        control_chartR.setText("Amplitude");
        control_chartR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartRActionPerformed(evt);
            }
        });
        jMenu9.add(control_chartR);

        control_chartS.setText("Desvio Padrão");
        control_chartS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartSActionPerformed(evt);
            }
        });
        jMenu9.add(control_chartS);

        control_chartS2.setText("Variância");
        control_chartS2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartS2ActionPerformed(evt);
            }
        });
        jMenu9.add(control_chartS2);

        jMenu4.add(jMenu9);

        control_chart.add(jMenu4);

        jMenu6.setText("Atributos");

        control_chartp.setText("Gráfico p");
        control_chartp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartpActionPerformed(evt);
            }
        });
        jMenu6.add(control_chartp);

        control_chartnp.setText("Gráfico np");
        control_chartnp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartnpActionPerformed(evt);
            }
        });
        jMenu6.add(control_chartnp);

        control_chartc.setText("Gráfico c");
        control_chartc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartcActionPerformed(evt);
            }
        });
        jMenu6.add(control_chartc);

        control_chartu.setText("Gráfico u");
        control_chartu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartuActionPerformed(evt);
            }
        });
        jMenu6.add(control_chartu);

        control_chart.add(jMenu6);

        jMenu8.setText("Observações Individuais");

        control_chartMR.setText("MR");
        control_chartMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartMRActionPerformed(evt);
            }
        });
        jMenu8.add(control_chartMR);

        control_chartXbar.setText("Xbar");
        control_chartXbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                control_chartXbarActionPerformed(evt);
            }
        });
        jMenu8.add(control_chartXbar);

        control_chart.add(jMenu8);

        jMenu5.setText("Outros Tipos");

        regression.setText("Regressão");
        regression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regressionActionPerformed(evt);
            }
        });
        jMenu5.add(regression);

        cusum.setText("CUSUM");
        cusum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusumActionPerformed(evt);
            }
        });
        jMenu5.add(cusum);

        ewma.setText("EWMA");
        ewma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ewmaActionPerformed(evt);
            }
        });
        jMenu5.add(ewma);

        control_chart.add(jMenu5);

        jMenu2.add(control_chart);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ajuda");

        help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        help.setText("Sobre o SISCEQ");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        jMenu3.add(help);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1000)/2, (screenSize.height-700)/2, 1000, 700);
    }// </editor-fold>//GEN-END:initComponents

	private void regression_control_chartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regression_control_chartActionPerformed
//		TODO add your handling code here:    	
		RegressionStatistic statistic = new RegressionStatistic();
		RegressionChartLimits limites = null; 
		File arquivo = OpenActionPerformed(evt);
		ChartFrame frame;
		try 
		{
			frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
			Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
			frame.setLocation(200,200);                
			frame.pack();
			frame.setVisible(true);
		}
		catch (DataSetException e) 
		{
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
		//frame.setLocationByPlatform(true);

}//GEN-LAST:event_regression_control_chartActionPerformed

private void median_control_chartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_median_control_chartActionPerformed
//	TODO add your handling code here:
	SelectEstimator control_chartMedia = new SelectEstimator(this);		
	control_chartMedia.show(true);
	
}//GEN-LAST:event_median_control_chartActionPerformed


private void deletar(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletar
//	TODO add your handling code here:

}//GEN-LAST:event_deletar

private void standard_desviationActionPerformed(java.awt.event.ActionEvent evt) throws DataSetException {//GEN-FIRST:event_standard_desviationActionPerformed
//	TODO add your handling code here:

	GenericStatistic statistic = new StandardDeviationStatistic(true);
	StandardDeviationChartLimits limites = new StandardDeviationChartLimits(); 
	File arquivo = OpenActionPerformed(evt);
	ChartFrame frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
	//frame.setLocationByPlatform(true);
	Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                
	frame.pack();
	frame.setVisible(true);
}//GEN-LAST:event_standard_desviationActionPerformed

private void control_charMediantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_charMediantActionPerformed
//	TODO add your handling code here:
	            
}//GEN-LAST:event_control_charMediantActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//	TODO add your handling code here:
}//GEN-LAST:event_formWindowOpened

private void BasicStatisticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BasicStatisticActionPerformed
//	TODO add your handling code here:
	File arquivo = abrirArquivo();
	DataConverter conversor_long = new DoubleDataConverter();
	DataSetIterate data_set = new DataSetCsvIterator(arquivo,conversor_long,false,null);
	BasicStatistic interface_statistic_basics;
	try {
		CalculateStatisticBasic descritive = new CalculateStatisticBasic(data_set);
		String amostras = Double.toString(descritive.getQtdAmostras());
		String minimo = Double.toString(descritive.getMin());
		String maximo = Double.toString(descritive.getMax());
		String desvio_padrao = Double.toString(descritive.getDesvio());
		String media_amostras = Double.toString(descritive.getQtdAmostras());
		String variancia_amostras = Double.toString(descritive.getVariance());
		
		String amostras_text= new String("\n Quantidade de Amostras Analisadas: "+amostras);
		String minimo_text= new String("\n Valor Mínimo: "+minimo);
		String maximo_text= new String("\n Valor Mínimo: "+maximo);
		String desvio_text= new String("\n Desvio Padrão: "+desvio_padrao);
		String media_text= new String("\n Média: "+media_amostras);
		String variancia_text= new String("\n Variância: "+variancia_amostras);
		
		this.jTextArea1.append("----------------------------------------------------------Estatística Básica----------------------------------------------------------");
		this.jTextArea1.append(amostras_text);
		this.jTextArea1.append(minimo_text);
		this.jTextArea1.append(maximo_text);
		this.jTextArea1.append(desvio_text);
		this.jTextArea1.append(media_text);
		this.jTextArea1.append(variancia_text);
		
//		interface_statistic_basics = new BasicStatistic(data_set);
//		interface_statistic_basics.setVisible(true);
	} catch (DataSetException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
}//GEN-LAST:event_BasicStatisticActionPerformed


private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
//	TODO add your handling code here:
	System.exit(EXIT_ON_CLOSE);
}//GEN-LAST:event_ExitActionPerformed

private File OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
	return this.abrirArquivo();
}//GEN-LAST:event_OpenActionPerformed

private void regressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regressionActionPerformed
    // TODO add your handling code here:
  	    RegressionStatistic statistic = new RegressionStatistic();
		RegressionChartLimits limites = null; 
		File arquivo = OpenActionPerformed(evt);
		ChartFrame frame;
		try 
		{
			frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
			Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
			frame.setLocation(200,200);                
			frame.pack();
			frame.setVisible(true);
		}
		catch (DataSetException e) 
		{
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage());
		}
		//frame.setLocationByPlatform(true);
                     
}//GEN-LAST:event_regressionActionPerformed

private void control_chartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartActionPerformed
    // TODO add your handling code here:
    	SelectEstimator control_chart = new SelectEstimator(this);		
	control_chart.show(true);   
}//GEN-LAST:event_control_chartActionPerformed

private void control_charMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_charMedianActionPerformed
    // TODO add your handling code here:
    SelectEstimator control_chart = new SelectEstimator(this);		
    control_chart.show(true);   
}//GEN-LAST:event_control_charMedianActionPerformed

private void control_charAverageActionPerformed(java.awt.event.ActionEvent evt) {                                                    
    // TODO add your handling code here:
	this.setVisible(true);
	GenericStatistic statistic = new AverageStatistic();
	GenericChartLimits limites = new AverageChartLimits(); 
	File arquivo = abrirArquivo();
	ChartFrame frame;		
	try 
	{
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
		frame.pack();
		frame.setVisible(true);                        
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
		frame.setLocation(200,200);                        
	} catch (DataSetException e) {
		// TODO tratar essa excessão
		e.printStackTrace();
	}	

}                                                  

private void cusumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusumActionPerformed
	CusumChartLimits limites = null;
	CusumStatistic statistic1 = null;
	CusumStatistic statistic2 = null;
	//mudar
	
	double k = 0.5;
	//TODO mudar o k pra pegar da interface
	
	File arquivo = OpenActionPerformed(evt);
	ChartFrame frame;
	try 
	{
		limites = new CusumChartLimits();
		statistic1 = new CusumStatistic(true,k,limites);
		statistic2 = new CusumStatistic(false,k,limites);
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.doubleLineChart(statistic1,statistic2, arquivo,limites));
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		frame.setSize(screenSize);
		frame.setLocation(200,200);                
		frame.pack();
		frame.setVisible(true);
		
		ArrayList<Integer> n_plus = statistic1.getStored_Ns();
		ArrayList<Integer> n_minus = statistic2.getStored_Ns();
		
		this.jTextArea1.setText("n" +"\t" +"ni+" +"\t" +"ni-");
		
		for(int cont=0;cont<n_plus.size();cont++)
		{
			this.jTextArea1.append("\n"+(cont+1)+"\t"+n_plus.get(cont)+"\t"+n_minus.get(cont));
		}
	}
	catch (DataSetException e) 
	{
		e.printStackTrace();
		JOptionPane.showMessageDialog(this, e.getMessage());
	}
	catch (Exception e) 
	{
		e.printStackTrace();
		JOptionPane.showMessageDialog(this, e.getMessage());
	}
}//GEN-LAST:event_cusumActionPerformed

private void control_chartMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartMRActionPerformed
    // TODO add your handling code here:
	this.setVisible(false);
	GenericStatistic statistic = new MovingRangeStatistic();
	GenericChartLimits limites = new MovingRangeChartLimits(); 
	File arquivo = this.abrirArquivo();
	ChartFrame frame;		
	try 
	{
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
		frame.pack();
		frame.setVisible(true);                        
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
		frame.setLocation(200,200);                        
	} catch (DataSetException e) {
		// TODO tratar essa excessão
		e.printStackTrace();
	}


}//GEN-LAST:event_control_chartMRActionPerformed

private void control_chartRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartRActionPerformed
    // TODO add your handling code here:
	this.setVisible(true);
	GenericStatistic statistic = new AmplitudeStatistic();
	GenericChartLimits limites = new AmplitudeChartLimits(); 
	File arquivo = abrirArquivo();
	ChartFrame frame;		
	try 
	{
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
		frame.pack();
		frame.setVisible(true);                        
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
		frame.setLocation(200,200);                        
	} catch (DataSetException e) {
		// TODO tratar essa excessão
		e.printStackTrace();
	}	

}//GEN-LAST:event_control_chartRActionPerformed

private void control_chartSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartSActionPerformed
    // TODO add your handling code here:
	this.setVisible(true);
	GenericStatistic statistic = new StandardDeviationStatistic(true);
	GenericChartLimits limites = new StandardDeviationChartLimits(); 
	File arquivo = abrirArquivo();
	ChartFrame frame;		
	try 
	{
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
		frame.pack();
		frame.setVisible(true);                        
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
		frame.setLocation(200,200);                        
	} catch (DataSetException e) {
		// TODO tratar essa excessão
		e.printStackTrace();
	}
}//GEN-LAST:event_control_chartSActionPerformed

private void control_chartS2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartS2ActionPerformed
    // TODO add your handling code here:
	//FALTA IMPLEMENTAR
}//GEN-LAST:event_control_chartS2ActionPerformed

private void control_chartpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartpActionPerformed
    // TODO add your handling code here:
	//recuperar o valor
	//calcular a média de p
	//calcular os limtes
	
}//GEN-LAST:event_control_chartpActionPerformed

private void control_chartnpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartnpActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_control_chartnpActionPerformed

private void control_chartcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartcActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_control_chartcActionPerformed

private void control_chartuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartuActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_control_chartuActionPerformed

private void ewmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ewmaActionPerformed
    // TODO add your handling code here:
	SelectConstanteEwma control_chartMedia = new SelectConstanteEwma(this);		
	control_chartMedia.show(true);
	
}//GEN-LAST:event_ewmaActionPerformed

private void control_chartXbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_control_chartXbarActionPerformed
    // TODO add your handling code here:
	this.setVisible(false);
	GenericStatistic statistic = new MeanStatistic();
	GenericChartLimits limites = new XIndividualChartLimits(); 
	File arquivo = OpenActionPerformed(evt);
	ChartFrame frame;		
	try 
	{
		frame = new ChartFrame("Gerando Gráfico", GenerateGraphs.lineChart(statistic, arquivo,limites));
		frame.pack();
		frame.setVisible(true);                        
		Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();                          
		frame.setLocation(200,200);                        
	} catch (DataSetException e) {
		// TODO tratar essa excessão
		e.printStackTrace();
	}
}//GEN-LAST:event_control_chartXbarActionPerformed

private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
	
    // TODO add your handling code here:
	this.setVisible(true);
	Help ajuda = new Help(this);
	ajuda.setVisible(true);
	
}//GEN-LAST:event_helpActionPerformed

private void selectBestChartjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBestChartjMenuItemActionPerformed
    // TODO add your handling code here:
    this.setVisible(true);
    SelectBestChart best_chart = new SelectBestChart(this);
    best_chart.setVisible(true);
}//GEN-LAST:event_selectBestChartjMenuItemActionPerformed

public static File abrirArquivo()
{
	JFileChooser chooser = new JFileChooser();
	chooser.showOpenDialog(null);
	File arquivo = chooser.getSelectedFile();

	if(arquivo==null)
	{
		System.out.println("Arquivo null");
	}
	return arquivo;
}

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {
		public void run() {
			new Main().setVisible(true);   				

		}
	});
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem basic_statistic;
    private javax.swing.JMenuItem control_charMedian;
    private javax.swing.JMenu control_chart;
    private javax.swing.JMenuItem control_chartAverage;
    private javax.swing.JMenuItem control_chartMR;
    private javax.swing.JMenuItem control_chartR;
    private javax.swing.JMenuItem control_chartS;
    private javax.swing.JMenuItem control_chartS2;
    private javax.swing.JMenuItem control_chartXbar;
    private javax.swing.JMenuItem control_chartc;
    private javax.swing.JMenuItem control_chartnp;
    private javax.swing.JMenuItem control_chartp;
    private javax.swing.JMenuItem control_chartu;
    private javax.swing.JMenuItem cusum;
    private javax.swing.JMenuItem ewma;
    private javax.swing.JMenuItem help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem normality_test;
    private javax.swing.JMenuItem regression;
    private javax.swing.JMenuItem selectBestChartjMenuItem;
    // End of variables declaration//GEN-END:variables

}
